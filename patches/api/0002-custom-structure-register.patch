From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Molean <cnmolean@gmail.com>
Date: Sun, 10 Jul 2022 20:19:50 +0800
Subject: [PATCH] custom structure register


diff --git a/src/main/java/com/molean/region/monitor/LevelRegionPos.java b/src/main/java/com/molean/region/monitor/LevelRegionPos.java
new file mode 100644
index 0000000000000000000000000000000000000000..adced2d88a098f8a470970ed220a505874c409e9
--- /dev/null
+++ b/src/main/java/com/molean/region/monitor/LevelRegionPos.java
@@ -0,0 +1,30 @@
+package com.molean.region.monitor;
+
+public class LevelRegionPos extends RegionPos{
+    private final String level;
+
+    public String getLevel() {
+        return level;
+    }
+
+    public LevelRegionPos(String level, int x, int z) {
+        super(x, z);
+        this.level = level;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof LevelRegionPos that)) return false;
+        if (!super.equals(o)) return false;
+
+        return level.equals(that.level);
+    }
+
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + level.hashCode();
+        return result;
+    }
+}
diff --git a/src/main/java/com/molean/structures/CustomStructureRegister.java b/src/main/java/com/molean/structures/CustomStructureRegister.java
new file mode 100644
index 0000000000000000000000000000000000000000..75018dfe58bd72038fcf3d9d5656eba2f0b78ac6
--- /dev/null
+++ b/src/main/java/com/molean/structures/CustomStructureRegister.java
@@ -0,0 +1,55 @@
+package com.molean.structures;
+
+import com.molean.region.monitor.LevelRegionPos;
+import com.molean.region.monitor.RegionPos;
+import it.unimi.dsi.fastutil.Pair;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.BiFunction;
+
+public enum CustomStructureRegister {
+    INSTANCE,
+    ;
+
+    CustomStructureRegister() {
+    }
+
+    private final Map<RegionPos, String> structureMap = new HashMap<>();
+
+    private final Map<LevelRegionPos, String> levelStructureMap = new HashMap<>();
+
+    private BiFunction<String, Pair<Integer, Integer>, String> predictor = (s, integerIntegerPair) -> null;
+
+    public void setPredictor(BiFunction<String, Pair<Integer, Integer>, String> predictor) {
+        this.predictor = predictor;
+    }
+
+    public void register(int regionX, int reginZ, String structureType) {
+        structureMap.put(new RegionPos(regionX, reginZ), structureType);
+    }
+
+    public void register(String level, int regionX, int reginZ, String structureType) {
+        levelStructureMap.put(new LevelRegionPos(level, regionX, reginZ), structureType);
+    }
+
+    public String getStructure(int x, int z) {
+        return structureMap.get(new RegionPos(x, z));
+    }
+
+    public String getStructure(String level, int x, int z) {
+        return levelStructureMap.get(new LevelRegionPos(level, x, z));
+    }
+
+    public Map<RegionPos, String> getStructureMap() {
+        return structureMap;
+    }
+
+    public Map<LevelRegionPos, String> getLevelStructureMap() {
+        return levelStructureMap;
+    }
+
+    public BiFunction<String, Pair<Integer, Integer>, String> getChunkPredictor() {
+        return predictor;
+    }
+}
