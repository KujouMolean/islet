From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Molean <cnmolean@gmail.com>
Date: Sun, 3 Jul 2022 01:08:56 +0800
Subject: [PATCH] region monitor


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 7d98f9af7cc6c92ba0b503f919c29a361db65593..00629983131f388704a48fea1a86e20a2cc520f1 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -14,6 +14,8 @@ import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.JsonOps;
+import com.molean.region.monitor.RegionMonitor;
+import com.molean.region.monitor.RegionMonitorManager;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
@@ -1264,7 +1266,10 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         this.level.timings.tracker2.startTiming();
         try {
             for (TrackedEntity tracker : this.entityMap.values()) {
+                RegionMonitor regionMonitor = RegionMonitorManager.INSTANCE.get(tracker.entity.chunkPosition().getRegionX(), tracker.entity.chunkPosition().getRegionZ()); // Islet
+                regionMonitor.startTick(tracker.entity.getLevel().getCraftServer().getCurrentTick()); // Islet
                 tracker.serverEntity.sendChanges();
+                regionMonitor.stopTick(); // Islet
             }
         } finally {
             this.level.timings.tracker2.stopTiming();
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index ca84eddbdb1e198b899750e5f6b3eafd25ce970f..013d48b6c479358e7d40ead36d0cfffa36d9d674 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -18,6 +18,8 @@ import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import com.molean.region.monitor.RegionMonitor;
+import com.molean.region.monitor.RegionMonitorManager;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -758,6 +760,8 @@ public class ServerChunkCache extends ChunkSource {
                     // Paper - move down
                 // Paper end - optimise chunk tick iteration
                 ChunkPos chunkcoordintpair = chunk1.getPos();
+                RegionMonitor regionMonitor = RegionMonitorManager.INSTANCE.get(chunkcoordintpair.getRegionX(), chunkcoordintpair.getRegionZ());
+                regionMonitor.startTick(chunk1.level.getCraftServer().getCurrentTick());
 
                 if ((true || this.level.isNaturalSpawningAllowed(chunkcoordintpair)) && this.chunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, false)) { // Paper - optimise anyPlayerCloseEnoughForSpawning // Paper - the chunk is known ticking
                     chunk1.incrementInhabitedTime(j);
@@ -770,6 +774,7 @@ public class ServerChunkCache extends ChunkSource {
                         if ((chunksTicked++ & 1) == 0) net.minecraft.server.MinecraftServer.getServer().executeMidTickTasks(); // Paper
                     }
                 }
+                regionMonitor.stopTick();
                 // Paper start - optimise chunk tick iteration
                 }
             }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index f3a19d00f78e19aa98c57461efb90d79f656a992..d5a226a8a58d10d5eada2020e5b111932ed3525c 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -6,6 +6,8 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import com.molean.region.monitor.RegionMonitor;
+import com.molean.region.monitor.RegionMonitorManager;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
@@ -711,6 +713,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
             timings.entityTick.startTiming(); // Spigot
             this.entityTickList.forEach((entity) -> {
+                RegionMonitor regionMonitor = RegionMonitorManager.INSTANCE.get(entity.getBlockX() >> 9, entity.getBlockZ() >> 9); //Islet
+                regionMonitor.startTick(entity.getLevel().getCraftServer().getCurrentTick()); //Islet
                 if (!entity.isRemoved()) {
                     if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
                         entity.discard();
@@ -735,6 +739,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                         }
                     }
                 }
+                regionMonitor.stopTick(); // Islet
             });
             timings.entityTick.stopTiming(); // Spigot
             timings.tickEntities.stopTiming(); // Spigot
@@ -1145,23 +1150,27 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     private void tickFluid(BlockPos pos, Fluid fluid) {
+        RegionMonitor regionMonitor = RegionMonitorManager.INSTANCE.get(pos.getX() >> 9, pos.getZ() >> 9);
+        regionMonitor.startTick(getCraftServer().getCurrentTick());
         FluidState fluid1 = this.getFluidState(pos);
 
         if (fluid1.is(fluid)) {
             fluid1.tick(this, pos);
         }
         MinecraftServer.getServer().executeMidTickTasks(); // Paper - exec chunk tasks during world tick
-
+        regionMonitor.stopTick();
     }
 
     private void tickBlock(BlockPos pos, Block block) {
+        RegionMonitor regionMonitor = RegionMonitorManager.INSTANCE.get(pos.getX() >> 9, pos.getZ() >> 9);
+        regionMonitor.startTick(getCraftServer().getCurrentTick());
         BlockState iblockdata = this.getBlockState(pos);
 
         if (iblockdata.is(block)) {
             iblockdata.tick(this, pos, this.random);
         }
         MinecraftServer.getServer().executeMidTickTasks(); // Paper - exec chunk tasks during world tick
-
+        regionMonitor.stopTick();
     }
 
     // Paper start - log detailed entity tick information
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 3cbf801b2e5420c0e870f73788deb550e49ad54d..2cf0f369c7baa942d31139c468da5b7699848d6b 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -15,6 +15,8 @@ import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import com.molean.region.monitor.RegionMonitor;
+import com.molean.region.monitor.RegionMonitorManager;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -890,6 +892,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             }
             // Spigot end
 
+            RegionMonitor regionMonitor = RegionMonitorManager.INSTANCE.get(tickingblockentity.getPos().getX() >> 9, tickingblockentity.getPos().getZ() >> 9);
+            regionMonitor.startTick(getCraftServer().getCurrentTick());
             if (tickingblockentity.isRemoved()) {
                 // Spigot start
                 tilesThisCycle--;
@@ -903,6 +907,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
                 }
                 // Paper end - execute chunk tasks during tick
             }
+            regionMonitor.stopTick();
         }
         this.blockEntityTickers.removeAll(toRemove);
 
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 01b21f520ef1c834b9bafc3de85c1fa4fcf539d6..55f86bc892b47764d6487f932c520cb849158940 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -1,6 +1,9 @@
 package net.minecraft.world.level;
 
 import com.mojang.logging.LogUtils;
+import com.molean.region.monitor.RegionMonitor;
+import com.molean.region.monitor.RegionMonitorManager;
+import com.molean.region.monitor.RegionPos;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
