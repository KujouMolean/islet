From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Molean <cnmolean@gmail.com>
Date: Sun, 10 Jul 2022 23:03:17 +0800
Subject: [PATCH] relocate end portal


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index c66f01d3289c288615272b2c1ae5c23de9906c59..afbb95b6ccee1fae0668d9adecaac8e53bad31bf 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -8,6 +8,7 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import com.molean.regionmonitor.RegionMonitor;
 import com.molean.regionmonitor.RegionMonitorManager;
+import com.molean.regionmonitor.RegionPos;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
@@ -23,15 +24,7 @@ import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -2415,11 +2408,15 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     public static void makeObsidianPlatform(ServerLevel worldserver, Entity entity) {
         // CraftBukkit end
-        BlockPos blockposition = ServerLevel.END_SPAWN_POINT;
+        BlockPos blockposition;
+        Random random = new Random(new RegionPos(entity.getBlockX() >> 9, entity.getBlockZ() >> 9).hashCode());
+        int x = random.nextInt(480) + 16;
+        int y = random.nextInt(224) + 16;
+        int z = random.nextInt(480) + 16;
+        blockposition = new BlockPos(((entity.getBlockX() >> 9) << 9) + x, worldserver.getMinBuildHeight() + y, ((entity.getBlockZ() >> 9) << 9) + z);
         int i = blockposition.getX();
         int j = blockposition.getY() - 2;
         int k = blockposition.getZ();
-
         // CraftBukkit start
         org.bukkit.craftbukkit.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.util.BlockStateListPopulator(worldserver);
         BlockPos.betweenClosed(i - 2, j + 1, k - 2, i + 2, j + 3, k + 2).forEach((blockposition1) -> {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index b0728b66c54dc22a5a98f150910d07f4b38ebd7e..0ca0eb89c6b073925431693f6f0372395ec89a09 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -7,18 +7,11 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.logging.LogUtils;
+import com.molean.regionmonitor.RegionPos;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+
+import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
@@ -3447,7 +3440,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             BlockPos blockposition1;
 
             if (flag1) {
-                blockposition1 = ServerLevel.END_SPAWN_POINT;
+                Random random = new Random(new RegionPos(this.getBlockX() >> 9, this.getBlockZ() >> 9).hashCode());
+                int x = random.nextInt(480) + 16;
+                int y = random.nextInt(224) + 16;
+                int z = random.nextInt(480) + 16;
+                blockposition1 = new BlockPos(((this.getBlockX() >> 9) << 9) + x, destination.getMinBuildHeight() + y, ((this.getBlockZ() >> 9) << 9) + z);
             } else {
                 // Paper start - Ensure spawn chunk is always loaded before calculating Y coordinate
                 destination.getChunkAt(destination.getSharedSpawnPos());
